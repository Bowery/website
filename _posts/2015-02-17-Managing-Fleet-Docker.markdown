---
layout: post
title:  "Managing the Fleet with Docker: Part 1"
date:   2015-02-19 10:00:00
categories: posts
tags:
- tech
- engineering
- Docker
---
In the last year, a lot of excitement has been generated by "Linux Containers," brought into the mainstream by Docker. The accessibility, portability, and ability to configure these containers has been very exciting for us at Bowery.

We've leveraged containers to build what we envision is the future of development environments. We want to make it easy for you to develop and deploy in your production environment. 

Bowery leverages Linux Containers to make environment management possible at large scale. In this series I'll talk a little bit about the Bowery app and architecture so you can better understand how and why to leverage Linux Containers-- and more specifically, Docker-- for your own deployment needs. This first post will focus specifically on how containers make an app like Bowery possible. I'll then talk about some of the features we've implemented to help you leverage these containers as well. If you want more info on provisioning development environments with Docker, [sign up for our webinar on February 25th](https://attendee.gotowebinar.com/register/3411168119429103873). 

## The Age Before Bowery: What did my environment look like? 

One of the reasons we started Bowery is because we felt the pain of constantly setting up new environments for new projects and then deploying broken code to production. 

In the past, my individual development environment was pretty typical: I ran all my software on OS X, on my local machine, had a browser full of localhost:someport tabs open. Most of my development was fairly simplistic: an API and a database. Maybe a caching system or job manager. And in some cases, I would test against a staging server. 

This experience radically changed when I worked with a friend or worked within a team. Version control was straight forward, but what was often overlooked with the software we used. I remember spending hours debugging my Ruby set up when I would run into issues with MacPorts and Homebrew. Engineers who work at larger organizations have more structured processes around environment management, testing and deployment structure, that is even more challenging to set up. 

My environment could only be built and maintained through diligence. Making sure that all of our software versions were the same across the team was work, and we often spent time debugging the installation rather than coding. If you don’t have a tool to manage this, you’re making huge assumptions about all of the  environments that you deploy into production. 

## Deploy Fail Whale 

Yes, managing our environments during development was hard, but the real issues would creep up when we would notice large gaps between my development, my co-workers development, and our production environments. Unfortunately, we would usually only see this once we had shipped our code. Classic deployment fail. 

What we really needed was a direct one-to-one relationship between each developer and their production environment. 

The best way for us as a team to stay in sync was to have our development environments match production as closely as possible, down to the operating system, utilities, configurations and architecture. 

If we were going to deploy apps on Linux servers, we should have been developing on Linux, not on our Macs. If our production environment has a load balancer, we should be developing with one. Each developer should have access to this same configuration, and it should stay in sync.

This was a huge problem for us, and we built Bowery to fix it. 

## Enter Containers 

Bowery is built on Docker which utilizes LXC. The Bowery app is a Terminal interface that connects you to a Docker container while you program on your Windows, Linux, or OS X machine. Docker provides an elegant wrapper for LXC that allows us to build containers using a Dockerfile; a set of instructions that explains the difference between one “diff” and another. Each container has it's own process manager and network space. This allows us to quickly provision and isolate individual processes that become Linux development environments. 

Our choice of which container to choose was critical. This is the underlying basis of our infrastructure. Our product would rely on these containers. We chose to use Docker instead of other container alternatives because it provides us easy access for managing containers and the systems that make them run, such as networking and mounting volumes. 

It also provides an imaging system that makes it easy to save each user’s changes that are made on the containers. This simplified the orchestration of users changes to just a few lines of code: 

<pre># Open a bash terminal and make any changes
docker run -t -i ubuntu:latest /bin/bash

# Make directory to store changes

mkdir changes
# Loop the changes and copy to the changes directory.

# Note: Change the container ID here. Also, this may take a lot of space depending on the number of changes.

for i in $(docker diff ba8336405d07); do
  if [[ "${i}" == [ACD] ]]; then
    continue
  fi

  docker cp "ba8336405d07:${i}" "changes/${i}"

done</pre> 

The beauty of these containers is that resources can be heavily shared. Depending on the process, we can minimize the footprint because of how the containers share their tools. This is a huge advantage that minimizes our operational overhead.

Bowery manages these containers for you, so you don't need to worry about provisioning each new instance when you want to launch a new environment. Right now we host all of these containers ourself on Google Cloud, but if needed we’re able to set these up as on-prem offerings. 

## Provisioning Containers for Simplified Ops 

With Docker, we’re able to elegantly manage the way you spin up new environments. Each time you open the Bowery Terminal you get a new environment, running a new Docker container. This allows you to code on your own machine but in a remote Linux server. This keeps your personal computer isolated from your production environment. 

### Setup with a Dockefile

With Bowery 3.6.0, we launched the ability to provision a Bowery environment with an existing Dockerfile. If you have an existing Docker configuration you'd like to develop with on your Windows or Mac machine, you can launch that with Bowery. Here's a quick step-by-step for how it works. 

1. Make sure your Dockerfile is in the correct directory. 
2. When you launch the Bowery Terminal, select the directory where your project and Dockerfile are located.
3. Before Bowery launches a new container, it will ask if you would like to use your existing Dockerfile to provision your environment. Click yes, and Bowery will read the Dockerfile in your directory and executes the steps to set up your operating system and dependencies. 
4. Once the instance is launched, navigate to your folder in your Bowery terminal and start coding as usual. 
5. Once you're finished, save your environment. All of the work you've done in your container is saved.
6. Once you’re ready to deploy, all you need to do is export the Bowery environment. We provide [two options](http://bowery.io/docs/deployment/): Export to a Docker image, or a chroot jail. This makes it easy to port to any production system or CI tool you would like to use. 

### What Happens To My Dockerfile? 

Nothing. Your Dockerfile will not be modified when deployed with Bowery. All of your environment's information gets saved in a .bowery file. The Dockerfile is only use it as the base when creating the image the *first* time. Next time you launch your project with Bowery it will use the .bowery file to boot up your environment, which, if you started it with a Dockerfile, will have the same information as your original Dockerfile. 
  
### Why run your Docker containers on Bowery? 

* If you’re on a Mac or Windows, Bowery offers a simpler way for you to run Docker containers without launching a hefty Virtual Machine. 

* If you're using Docker in production, you can use Bowery to create parity with your development environment and production environments. 

## Containers Make it Possible

We’ve seen Docker mature significantly and are excited about the future of containers. Bowery would not be where it is today without Docker's expansion of container technology. In our next post, we'll discuss some of the strategies we've developed to secure our fleet of containers and the tools we use to do so. 

## Learn More 

If you want to learn more, sign up for our Webinar on February 25 to learn more about provisioning your development environments with Bowery and Docker.

<div>
<form class="form">
    {% for f in page.fields %}
      {% for field in f %}
        <input class="field" type="text" placeholder="{{field[1]}}" name="{{field[0]}}">
      {% endfor %}
    {% endfor %}
    <a class="btn" href="https://attendee.gotowebinar.com/register/3411168119429103873">register &rarr;</a>

  </form>
</div>